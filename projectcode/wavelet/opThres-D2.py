import matplotlib.pyplot as plt
import csv
import numpy as np
import pywt
import pywt.data
from scipy import io
from numpy import random

ApEn_norm1 = [1.530770508258434, 1.4587485203555017, 1.4908996990376888, 1.547515098053423, 1.5018718653550875, 1.4784215399065106, 1.4552106282733375, 1.4656804147117626, 1.492922717527585, 1.4832199728825257, 1.4912398353204201, 1.5133614691893174, 1.50214965786909, 1.5075491925981837, 1.555505716258006, 1.5139147704017173, 1.512911699682138, 1.500903748893581, 1.5425668055646486, 1.5542799503037141, 1.5421484158705274, 1.5083169952852593, 1.5151254460183665, 1.5153688590643029, 1.5098131914168587, 1.5432540936371417, 1.339989609821938, 1.5102909960904958, 1.560365739622461, 1.5570512992350718, 1.5183246927489087, 1.5201011575953478, 1.545567648563865, 1.542669882660931, 1.5152505954209037, 1.5157344234915717, 1.491391326727686, 1.5374113593794831, 1.5163368823317525, 1.5257628164533203, 1.533061587444914, 1.5184030086720908, 1.5251118152257739, 1.4942180166051129, 1.5141426411524295, 1.4850448288978573, 1.497332067349741, 1.475710093725489, 1.4936857488250084, 1.478234423652558]
ApEn_norm2 = [1.493756479632852, 1.497861048514281, 1.4808260993168645, 1.4736744749507409, 1.4648499782224533, 1.52068702929283, 1.5134292440032748, 1.4532529783714079, 1.5191117412047195, 1.503878348939046, 1.5270980350422727, 1.5287554653914448, 1.5012191996509143, 1.4831943988736205, 1.4706278843497733, 1.4812673109484464, 1.4941767417030327, 1.3820747925173409, 1.4879044079758277, 1.5150749718326386, 1.4973788960542533, 1.4687183077414216, 1.4721109307432982, 1.5025766618625083, 1.4931393233468029, 1.483487448964211, 1.4887435653696652, 1.516828051661994, 1.4900311528359165, 1.4578987443898646, 1.5021430276062304, 1.4548348201105101, 1.3465245835766009, 1.503540172483449, 1.5377799605687024, 1.511510116362527, 1.5288318397171645, 1.4753347335157097, 1.5178664644993667, 1.460484101988678, 1.5179845207920053, 1.4846928032332434, 1.4083432464992898, 1.4762024389757942, 1.4853448920650498, 1.5028985312333978, 1.5137458340117442, 1.4887986154808255, 1.5410803990206547, 1.5050835018889774]
ApEn_inter1 = [1.5208359550235722, 1.4990497551737283, 1.5101090168515947, 1.4822962778227682, 1.506432129185053, 1.4588974987241201, 1.539695902457626, 1.5404021950024864, 1.5233308726218713, 1.5215850534044328, 1.54758146872926, 1.5412229299064366, 1.5682028240423307, 1.462774085845152, 1.5220729778136413, 1.5065695558391416, 1.49667098375678, 1.5463731513868808, 1.5293863015940738, 1.5510167705426294, 1.4879882549051882, 1.4858259362172532, 1.5238375215025721, 1.5385661482364963, 1.5454755861454892, 1.505549664504029, 1.5258062078794392, 1.5371703440507618, 1.5009606351113423, 1.5408924268448265, 1.5089111752927105, 1.5305089094507291, 1.5286847128302323, 1.5256824755014406, 1.5512912821224951, 1.5895433235206067, 1.4961232449526891, 1.5304508886468318, 1.5034537118319777, 1.5429372891750335, 1.5326509481827202, 1.5494960337618044, 1.5155748029654363, 1.5265411753891511, 1.5258884183306858, 1.536501480399818, 1.4916794704204648, 1.5000542491644682, 1.5348879173874819, 1.5453946099599642]
ApEn_inter2 = [1.5494994536516096, 1.1229007864730134, 1.3653987299777697, 1.5356174755766538, 1.2769779347048482, 1.542368350987303, 1.4938670882309593, 1.3712407978160512, 0.6920775523017437, 1.0994918584298299, 1.4862245819115678, 1.520428810860568, 1.5433422858263635, 1.5336263273788822, 1.5101995104458261, 1.5110283039851353, 1.5374053775969676, 1.551634397401343, 1.5416969712562807, 1.502590718147495, 1.1480640847209416, 1.471126712571535, 1.5303909378907496, 1.555231878019896, 1.521445040058679, 1.4954482736756187, 1.5226727648174716, 1.4339868112680385, 1.346048612718247, 1.116781982525497, 1.2032231770947268, 1.3573650500854333, 1.5204594076206144, 1.4826463732326296, 1.55622793453563, 1.571606200255581, 1.5496809439704764, 1.444483016492888, 1.5041118881296747, 1.521103932726998, 1.5386521725386597, 1.5118609529056837, 1.5541866699630393, 1.5432810407795756, 1.5216115513230974, 1.5271038085815114, 1.4853369384311703, 1.533386852433468, 1.5269635077018924, 1.4837037150830108]
ApEn_ep = [1.0203323264674466, 1.2527338454377448, 1.0441388018198303, 1.4382883762080603, 1.326205765898222, 1.3733762352666874, 0.5246218950070647, 1.3158623731136254, 1.4397917435745793, 1.0642642868868428, 1.198590559061163, 1.1433028614706986, 1.260945138292775, 1.1309636837827108, 1.0643461513883246, 1.048659445009707, 1.2786317683073092, 0.8922943903299867, 1.283228808845803, 1.3492424405749812, 1.0948900948152178, 1.0709103531342965, 1.0668732873095923, 1.3825760138566903, 1.0223982981054953, 1.4041545492872967, 1.3093818921382487, 1.3571758322883838, 0.8677639133248269, 1.2175286442000521, 1.2141507855843567, 1.0539081865924338, 1.4439316259945238, 1.2598956050352346, 1.293942650738189, 1.3939238398544074, 0.9861774179566174, 0.8981232441756624, 1.5127125285763237, 0.8548620533433082, 1.0239318093211516, 1.4743456669472934, 1.4354411780452097, 1.4370095135812262, 0.7828316653634819, 1.3456870582093563, 1.008745968317541, 1.4250224736968198, 1.129199194598693, 1.3914290958378261]

ApEn_norm1 = np.array(ApEn_norm1)
ApEn_norm2 = np.array(ApEn_norm2)
ApEn_inter1 = np.array(ApEn_inter1)
ApEn_inter2 = np.array(ApEn_inter2)
ApEn_ep = np.array(ApEn_ep)

# false positive rate
fpr = []
# true positive rate
tpr = []
# true negative rate
tnr = []
#total accuracy
accuracy = []
# Iterate thresholds from 1.600, 1.601, ... 1.900
thresholds = np.arange(1.3, 1.6, .001)

# iterate through all thresholds and determine fraction of true positives
# and false positives found at this threshold
for thresh in thresholds:
    FP=0
    TP=0
    for i in range(0, 50):
        if(ApEn_norm1[i] < thresh):
            FP = FP + 1
    for ii in range(0, 50):
        if(ApEn_norm2[ii] < thresh):
            FP = FP + 1
    for iii in range(0, 50):
        if(ApEn_inter1[iii] < thresh):
            FP = FP + 1
    for iv in range(0, 50):
        if(ApEn_inter2[iv] < thresh):
            FP = FP + 1
    for j in range(0, 50):
        if(ApEn_ep[j] < thresh):
            TP = TP + 1
    fpr.append(FP/200)
    tnr.append((200-FP)/200)
    tpr.append(TP/50)
    accuracy.append((TP+(200-FP))/250)

plt.xlabel('FPR(False Positive Rate)')
plt.ylabel('TPR(True Positive Rate)')
plt.title('ROC curve')
plt.plot(fpr, tpr)
plt.show()

def annot_max(x,y, ax=None):
    xmax = x[np.argmax(y)]
    ymax = y.max()
    text= "x={:.3f}, y={:.3f}".format(xmax, ymax)
    if not ax:
        ax=plt.gca()
    bbox_props = dict(boxstyle="square,pad=0.3", fc="w", ec="k", lw=0.72)
    arrowprops=dict(arrowstyle="->",connectionstyle="angle,angleA=0,angleB=60")
    kw = dict(xycoords='data',textcoords="axes fraction",
              arrowprops=arrowprops, bbox=bbox_props, ha="right", va="top")
    ax.annotate(text, xy=(xmax, ymax), xytext=(0.94,0.96), **kw)

plt.plot(thresholds, tnr)
annot_max(thresholds, np.array(tnr))
plt.title('Accuracy of detecting normal signals')
plt.xlabel('Thresholds')
plt.ylabel('Accuracy')
plt.show()

plt.plot(thresholds, tpr)
annot_max(thresholds, np.array(tpr))
plt.title('Accuracy of detecting epileptic signals')
plt.xlabel('Thresholds')
plt.ylabel('Accuracy')
plt.show()

plt.plot(thresholds, accuracy)
annot_max(thresholds, np.array(accuracy))
plt.title('Overall Accuracy')
plt.xlabel('Thresholds')
plt.ylabel('Accuracy')
plt.show()
