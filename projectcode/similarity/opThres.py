import matplotlib.pyplot as plt
import csv
import numpy as np
import pywt
import pywt.data
from scipy import io
from numpy import random

score_norm1 = [19.667459476059076, 18.95417156219808, 25.02112088164345, 14.611060443466808, 16.342061900886048, 16.26906964366785, 15.12867517741454, 19.32473946401989, 19.829420893618348, 19.343462034690546, 32.693765833049866, 15.951332486169651, 22.151853072835173, 17.69004479008014, 19.683168715342916, 29.329178863133656, 16.29174081560323, 19.085422079447884, 15.786967581416329, 17.317483519066613, 14.675441085144996, 17.366558664848114, 27.95656366287768, 19.951269698152238, 17.503227072783613, 23.87602521430534, 15.101782229169041, 19.041091856537047, 20.683506185388126, 23.049119310656778, 19.502273903799303, 25.03527871963522, 21.5713748184612, 20.319108876907343, 17.19754228447417, 19.356045435172927, 20.728275792593283, 18.392782982788468, 18.160273178877087, 20.12901293178307, 16.697344300090275, 19.08536330362442, 17.35144821474632, 15.38163924298067, 18.415399309728652, 17.530311943002427, 18.749448683394174, 18.052878895582655, 16.045140020908427, 18.052477581774493]

score_norm2 = [15.959858248232809, 15.880401100790523, 13.7541224922978, 11.867923769751403, 12.632151400526617, 14.161914291790234, 8.43365594783011, 15.42578449925207, 12.72942306304094, 6.957634231789301, 6.00867476146975, 15.319993504434718, 12.216317388832147, 6.426545542281985, 6.440911790378966, 17.972901673516596, 5.908107077222076, 13.948639995552869, 8.896931854189063, 10.706560475706102, 11.974452131686606, 9.773866264302281, 14.415635540632387, 9.550509170141602, 10.353898796286817, 13.635782013448988, 9.234970961476225, 16.308939595236705, 17.768934040216532, 12.253828701397227, 16.22511310520931, 18.597182192803917, 14.282896701725493, 11.808404455308699, 7.2363013966560885, 16.248581769555418, 6.376362085024616, 6.623996440536509, 7.077245874954743, 10.783744613975907, 6.237652614638009, 21.91844286017999, 18.28410912347947, 17.010875824269693, 8.57002131044215, 9.986139789115294, 19.38324528187006, 13.128857951527255, 16.343039602903172, 17.673839139458394]

score_inter1 = [15.217141783730046, 10.723694249432146, 16.582008736018658, 15.744451945849303, 5.327257177039733, 13.91345860046834, 16.227989122705708, 15.735930575748096, 11.18641553565441, 21.614292953837843, 27.67611385169455, 12.95508637194424, 17.033074773899266, 19.36251268139225, 10.816690034721839, 15.142514794731925, 11.305035437106374, 17.123589257885918, 13.700628187425595, 16.631391461250058, 14.23236492060828, 13.702246335319911, 26.96695352991161, 11.519308011387952, 16.53235706641574, 22.11762352123998, 24.932887847753403, 27.942708664378852, 13.401612812733996, 14.147028021314338, 15.561817904439, 15.763731974720013, 10.43560906512186, 10.654118321288042, 14.808094878466614, 11.779653744411954, 14.837304354359397, 17.237423346957886, 13.211885780126947, 13.39277995920811, 24.089798170821513, 10.42212363610849, 11.721944915621194, 17.601522827345523, 15.134743947951844, 23.35928503225436, 10.872043913136283, 14.696922113046629, 17.283122480425845, 7.519097502259642]

score_inter2 = [16.694511456790362, 4.722031149433936, 9.163887302914656, 14.014721420398791, 8.379712174762972, 14.827203820482302, 17.04617811881837, 6.6354073161895455, 1.21960735745098, 4.600648010092932, 9.74979960632342, 17.543600246495963, 24.122403588605852, 21.08962014366308, 17.500581381834454, 14.44833273169427, 18.649138242741422, 10.934676450589198, 15.077519079076424, 19.08289816719036, 4.49939073785514, 9.724120314085104, 10.479062693518996, 8.93651678396159, 7.513657025760601, 26.03664447745569, 10.532368976840308, 13.669005090979855, 6.845991889603117, 4.279076728759409, 7.89194180425255, 9.145092614077404, 17.74219118586027, 25.48860830346426, 17.027545716552197, 18.918291882343212, 14.609491902596726, 13.79975370717589, 11.779369397100574, 25.18834743367806, 9.60649529986416, 24.558721594867407, 10.031640752913507, 12.203404349721362, 17.636858368280972, 15.55061373183301, 13.291422413600465, 11.81925429476876, 19.394352140896682, 11.185600474484657]

score_ep = [1.0995120672966365, 1.0378212100701711, 1.426751602629381, 3.56567656828768, 1.6265643283008588, 4.79959722519027, 2.3091596224902498, 1.2769865961578026, 1.6084102693495186, 0.9437253817021436, 1.4889925166624218, 1.0807646331447742, 0.9536392471627705, 4.518466011223804, 2.776788805582051, 6.574979592736393, 0.8771366391300032, 4.258575603836961, 1.1566409814909466, 2.8780821628797373, 5.043088659218759, 3.0281709887139807, 2.650108427086331, 1.8745735717301686, 1.4770337063278507, 2.4208808317126715, 0.9728607067348688, 1.0907838304752737, 3.19767409458147, 1.128657653040596, 1.9032123565302357, 6.093732500981769, 1.52045009522504, 1.4219500992769925, 0.9849975021735596, 2.9789409778249913, 0.8796106676668038, 3.588829328079579, 5.563463124956731, 2.9258118103438417, 1.220993830051111, 1.6190829942855938, 5.792030180497003, 1.3745991412344662, 3.069354529606937, 1.9484319301211717, 0.8693331969030438, 2.226548893131357, 1.0628889382447835, 1.9982694537570005]


score_norm1 = np.array(score_norm1)
score_norm2 = np.array(score_norm2)
score_inter1 = np.array(score_inter1)
score_inter2 = np.array(score_inter2)
score_ep = np.array(score_ep)

# false positive rate
fpr = []
# true positive rate
tpr = []
# true negative rate
tnr = []
#total accuracy
accuracy = []
# Iterate thresholds from 1.600, 1.601, ... 1.900
thresholds = np.arange(14, 20.001, .001)

# iterate through all thresholds and determine fraction of true positives
# and false positives found at this threshold
for thresh in thresholds:
    FP=0
    TP=0
    for i in range(0, 50):
        if(score_norm1[i] < thresh):
            FP = FP + 1
    for ii in range(0, 50):
        if(score_norm2[ii] < thresh):
            FP = FP + 1
    for iii in range(0, 50):
        if(score_inter1[iii] < thresh):
            FP = FP + 1
    for iv in range(0, 50):
        if(score_inter2[iv] < thresh):
            FP = FP + 1
    for j in range(0, 50):
        if(score_ep[j] < thresh):
            TP = TP + 1
    fpr.append(FP/200)
    tnr.append((200-FP)/200)
    tpr.append(TP/50)
    accuracy.append((TP+(200-FP))/250)

plt.xlabel('FPR(False Positive Rate)')
plt.ylabel('TPR(True Positive Rate)')
plt.title('ROC curve')
plt.plot(fpr, tpr)
plt.show()

def annot_max(x,y, ax=None):
    xmax = x[np.argmax(y)]
    ymax = y.max()
    text= "x={:.3f}, y={:.3f}".format(xmax, ymax)
    if not ax:
        ax=plt.gca()
    bbox_props = dict(boxstyle="square,pad=0.3", fc="w", ec="k", lw=0.72)
    arrowprops=dict(arrowstyle="->",connectionstyle="angle,angleA=0,angleB=60")
    kw = dict(xycoords='data',textcoords="axes fraction",
              arrowprops=arrowprops, bbox=bbox_props, ha="right", va="top")
    ax.annotate(text, xy=(xmax, ymax), xytext=(0.94,0.96), **kw)

plt.plot(thresholds, tnr)
annot_max(thresholds, np.array(tnr))
plt.title('Accuracy of detecting normal signals')
plt.xlabel('Thresholds')
plt.ylabel('Accuracy')
plt.show()

plt.plot(thresholds, tpr)
annot_max(thresholds, np.array(tpr))
plt.title('Accuracy of detecting epileptic signals')
plt.xlabel('Thresholds')
plt.ylabel('Accuracy')
plt.show()

plt.plot(thresholds, accuracy)
annot_max(thresholds, np.array(accuracy))
plt.title('Overall Accuracy')
plt.xlabel('Thresholds')
plt.ylabel('Accuracy')
plt.show()
